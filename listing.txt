=== .\twoModeGNSS.ino ===
#include "src/mode_bt.h"
#include "src/mode_ntrip.h"
#include "src/settings.h"

#define BUTTON_PIN 0  // set according to your connection

void setup() {
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  settingsLoad();

  if (settings.oneShotMode == 1 || settings.oneShotMode == 2) {
    // Clear flag for next boot!
    uint8_t mode = settings.oneShotMode;
    settings.oneShotMode = 0;
    settingsSave();

    if (mode == 1) {
      runNtripServerMode();
    } else if (mode == 2) {
      runBluetoothTransparentMode();
    }
  }

  if (digitalRead(BUTTON_PIN) == LOW) {
    runNtripServerMode();
  } else {
    runBluetoothTransparentMode();
  }
}

void loop() {
  // Nothing, all logic inside task loops
}

=== .\src\bt.cpp ===
#include "bt.h"
#include "esp_bt.h"

BluetoothSerial SerialBT;
uint8_t buf[BT_BUF_SIZE];

void initBluetooth() {
  btStop();  // stop classic, in case
  delay(50);
  btStart();  // start
  esp_bt_controller_mem_release(ESP_BT_MODE_BLE); // If not using BLE
  esp_bt_sleep_enable();

  // Start Bluetooth
  SerialBT.begin("RFGNSSESP32");
}

=== .\src\bt.h ===
#pragma once
#include <BluetoothSerial.h>

#define BT_BUF_SIZE 2048
extern uint8_t buf[BT_BUF_SIZE];

extern BluetoothSerial SerialBT;

void initBluetooth();

=== .\src\cli.cpp ===
#include "cli.h"
#include "settings.h"

extern Settings settings;

bool detectMagicChar(char input, const char *magicSeq, size_t &index) {
  size_t len = strlen(magicSeq);
  if (input == magicSeq[index]) {
    index++;
    if (index == len) {
      index = 0;  // Reset for retriggering
      return true;
    }
  } else {
    index = (input == magicSeq[0]) ? 1 : 0;
  }
  return false;
}

// Helper: Read one line with echo (supports backspace)
String cliReadLineWithEcho(Stream &serial) {
  String line = "";
  while (true) {
    while (!serial.available()) delay(10);
    char c = serial.read();
    if (c == '\r') continue;   // Ignore CR
    if (c == '\n') break;      // End of line
    if (c == 8 || c == 127) {  // Backspace or DEL
      if (line.length() > 0) {
        line.remove(line.length() - 1);
        serial.print("\b \b");  // Move cursor back, erase char, move back
      }
    } else if (isPrintable(c)) {
      line += c;
      serial.print(c);
    }
  }
  serial.println();
  return line;
}

void cliMode(Stream &serial) {
  serial.println("\n--- CLI MODE ---");
  while (true) {
    serial.print("Enter command: (show, set param_name value, save, exit, reboot [bt, ntrip])\r\n> ");
    String cmdline = cliReadLineWithEcho(serial);
    cmdline.trim();
    if (cmdline.length() == 0) continue;

    int firstSpace = cmdline.indexOf(' ');
    String cmd = (firstSpace == -1) ? cmdline : cmdline.substring(0, firstSpace);
    cmd.trim();

    if (cmd == "show") {
      serial.printf("wifi: %s / %s\r\n", settings.ssid, settings.wifiPassword);
      serial.printf("ntrip host: %s:%u\r\n", settings.casterHost, settings.casterPort);
      serial.printf("mountpoint: %s\r\n", settings.mountpoint);
      serial.printf("user: %s\r\n", settings.ntripUser);
      serial.printf("pass: %s\r\n", settings.ntripPassword);
      serial.printf("baud: %lu\r\n", (unsigned long)settings.gnssBaud);
    } else if (cmd == "set") {
      // Syntax: set param_name value
      String remain = cmdline.substring(firstSpace + 1);
      remain.trim();
      int paramSpace = remain.indexOf(' ');
      if (paramSpace == -1) {
        serial.println("Invalid set command. Use: set param_name value");
        continue;
      }
      String par = remain.substring(0, paramSpace);
      String val = remain.substring(paramSpace + 1);
      par.trim();
      val.trim();

      if (par == "ssid") strncpy(settings.ssid, val.c_str(), sizeof(settings.ssid) - 1);
      else if (par == "wifipass") strncpy(settings.wifiPassword, val.c_str(), sizeof(settings.wifiPassword) - 1);
      else if (par == "host") strncpy(settings.casterHost, val.c_str(), sizeof(settings.casterHost) - 1);
      else if (par == "port") settings.casterPort = val.toInt();
      else if (par == "mount") strncpy(settings.mountpoint, val.c_str(), sizeof(settings.mountpoint) - 1);
      else if (par == "user") strncpy(settings.ntripUser, val.c_str(), sizeof(settings.ntripUser) - 1);
      else if (par == "pass") strncpy(settings.ntripPassword, val.c_str(), sizeof(settings.ntripPassword) - 1);
      else if (par == "baud") settings.gnssBaud = val.toInt();
      else serial.println("Unknown param");
    } else if (cmd == "save") {
      settingsSave();
      serial.println("Settings saved.");
    } else if (cmd == "exit") {
      serial.println("Exiting CLI.");
      break;
    } else if (cmd == "reboot") {
      // Syntax: reboot [mode]
      String remain = cmdline.substring(firstSpace + 1);
      remain.trim();

      uint8_t requested = 0;  // 0=use normal
      if (remain.length() == 0) {
        // No mode, just normal reboot
        requested = 0;
      } else if (remain.equalsIgnoreCase("ntrip")) {
        requested = 1;
      } else if (remain.equalsIgnoreCase("bt") || remain.equalsIgnoreCase("bluetooth")) {
        requested = 2;
      } else {
        serial.println("Unknown mode. Use: reboot [ntrip|bt]");
        continue;
      }
      if (requested) {
        settings.oneShotMode = requested;
        settingsSave();  // save override to EEPROM
        serial.printf("Rebooting to %s mode...\r\n", requested == 1 ? "NTRIP" : "Bluetooth");
      } else {
        serial.println("Rebooting...");
      }
      delay(100);
      ESP.restart();  // Reboot immediately
    }
  }
}

=== .\src\cli.h ===
#pragma once
#include <BluetoothSerial.h>

#define MAGIC_SEQ "+++cli+++"

void cliMode(Stream &serial);

bool detectMagicChar(char input, const char *magicSeq, size_t &index);

=== .\src\gnss_uart.cpp ===
#include "gnss_uart.h"
#include "settings.h"
#include <HardwareSerial.h>

HardwareSerial GNSS(2);
extern Settings settings;

void initGNSSUART(){
  // Start GNSS UART
  GNSS.setRxBufferSize(SERIAL_SIZE_RX);
  GNSS.begin(settings.gnssBaud, SERIAL_8N1, UART2_RX, UART2_TX);
}

=== .\src\gnss_uart.h ===
#pragma once
#include <HardwareSerial.h>

#define UART2_RX 16  // Set according to physical wiring
#define UART2_TX 17

#define SERIAL_SIZE_RX 4096  

extern HardwareSerial GNSS;

void initGNSSUART();

=== .\src\mode_bt.cpp ===
#include "mode_bt.h"
#include <BluetoothSerial.h>
#include <HardwareSerial.h>
#include "settings.h"
#include "cli.h"
#include <WiFi.h>
#include "gnss_uart.h"
#include "esp_wifi.h"
#include "bt.h"

extern Settings settings;


void runBluetoothTransparentMode() {
  // WiFi off for low power
  WiFi.mode(WIFI_OFF);
  esp_wifi_stop();
  setCpuFrequencyMhz(80);

  initBluetooth();
  initGNSSUART();

  size_t magicIndex = 0;

  for (;;) {
    // Bluetooth -> GNSS
    int blen = SerialBT.available();
    if (blen > 0) {
      int rlen = SerialBT.readBytes(buf, min(blen, BT_BUF_SIZE));
      GNSS.write(buf, rlen);
    }

    // GNSS -> Bluetooth
    int ulen = GNSS.available();
    if (ulen > 0) {
      int rlen = GNSS.readBytes(buf, min(ulen, BT_BUF_SIZE));
      SerialBT.write(buf, rlen);
    }

    // Magic sequence check
    if (blen > 0) {
      for (int i = 0; i < blen; ++i) {
        if (detectMagicChar(buf[i], MAGIC_SEQ, magicIndex)) {
          cliMode(SerialBT);
          break;
        }
      }
    }

    delay(5); 
  }
}

=== .\src\mode_bt.h ===
#pragma once

void runBluetoothTransparentMode();

=== .\src\mode_ntrip.cpp ===
#include "mode_ntrip.h"
#include "settings.h"
#include "gnss_uart.h"
#include <WiFi.h>
#include "bt.h"
#include "cli.h"

#define LED_PIN 2
//choose one
// #define CONSOLE Serial
#define CONSOLE SerialBT

extern Settings settings;

WiFiClient ntripCaster;

long lastSentRTCM_ms = 0;            //Time of last data pushed to socket
int maxTimeBeforeHangup_ms = 10000;  //If we fail to get a complete RTCM frame after 10s, then disconnect from caster
uint32_t serverBytesSent = 0;        //Just a running total
long lastReport_ms = 0;              //Time of last report of bytes sent
long actualReportDelay = 0;

#define NTRIP_BUF_SIZE 2048
uint8_t ntripbuf[NTRIP_BUF_SIZE];

void beginServer() {
  CONSOLE.println("Begin transmitting to caster. Press any key to stop");
  delay(10);  //Wait for any serial to arrive
  while (CONSOLE.available())
    CONSOLE.read();  //Flush

  while (CONSOLE.available() == 0) {
    //Connect if we are not already
    if (ntripCaster.connected() == false) {
      CONSOLE.printf("Opening socket to %s\n", settings.casterHost);

      if (ntripCaster.connect(settings.casterHost, settings.casterPort) == true)  //Attempt connection
      {
        CONSOLE.printf("Connected to %s:%d\n", settings.casterHost, settings.casterPort);

        const int SERVER_BUFFER_SIZE = 512;
        char serverRequest[SERVER_BUFFER_SIZE];

        snprintf(serverRequest,
                 SERVER_BUFFER_SIZE,
                 "SOURCE %s /%s\r\nSource-Agent: NTRIP SparkFun UM980 Server v1.0\r\n\r\n",
                 settings.ntripPassword, settings.mountpoint);

        CONSOLE.println(F("Sending server request:"));
        CONSOLE.println(serverRequest);
        ntripCaster.write(serverRequest, strlen(serverRequest));

        //Wait for response
        unsigned long timeout = millis();
        while (ntripCaster.available() == 0) {
          if (millis() - timeout > 5000) {
            CONSOLE.println("Caster timed out!");
            ntripCaster.stop();
            return;
          }
          delay(10);
        }

        //Check reply
        bool connectionSuccess = false;
        char response[512];
        int responseSpot = 0;
        while (ntripCaster.available()) {
          response[responseSpot++] = ntripCaster.read();
          if (strstr(response, "200") != nullptr)  //Look for 'ICY 200 OK'
            connectionSuccess = true;
          if (responseSpot == 512 - 1)
            break;
        }
        response[responseSpot] = '\0';

        if (connectionSuccess == false) {
          CONSOLE.printf("Failed to connect to Caster: %s", response);
          return;
        }
      }  //End attempt to connect
      else {
        CONSOLE.println("Connection to host failed");
        return;
      }
    }  //End connected == false

    if (ntripCaster.connected() == true) {
      delay(10);
      while (CONSOLE.available())
        CONSOLE.read();  //Flush any endlines or carriage returns

      lastReport_ms = millis();
      lastSentRTCM_ms = millis();

      //This is the main sending loop. We scan for new data but processRTCM() is where the data actually gets sent out.
      while (1) {
        if (CONSOLE.available())
          break;

        //Write incoming RTCM to the NTRIP Caster

        int glen = GNSS.available();
        if (glen > 0) {
          int rlen = GNSS.readBytes(ntripbuf, min(glen, NTRIP_BUF_SIZE));
          ntripCaster.write(ntripbuf, rlen);
          serverBytesSent += rlen;
          lastSentRTCM_ms = millis();
        }

        //Close socket if we don't have new data for 10s
        //RTK2Go will ban your IP address if you abuse it. See http://www.rtk2go.com/how-to-get-your-ip-banned/
        //So let's not leave the socket open/hanging without data
        if (millis() - lastSentRTCM_ms > maxTimeBeforeHangup_ms) {
          CONSOLE.println("RTCM timeout. Disconnecting...");
          ntripCaster.stop();
          return;
        }

        delay(10);

        //Report some statistics every 250
        actualReportDelay = millis() - lastReport_ms;
        if (actualReportDelay > 1000) {
          ntripCaster.stop();
          return;
        }
        if (actualReportDelay > 250) {
          lastReport_ms += actualReportDelay;
          CONSOLE.printf("Total sent: %d\n", serverBytesSent);
        }
      }
    }

    delay(10);
  }
}

void runNtripServerMode() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  Serial.begin(115200);
  initGNSSUART();
  initBluetooth();
  delay(250);

  CONSOLE.println();
  CONSOLE.println("ntrip server mode");

  // Connect to WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(settings.ssid, settings.wifiPassword);
  unsigned long t0 = millis();
  while (WiFi.status() != WL_CONNECTED) {
    delay(300);
    if (millis() - t0 > 15000) {
      if (!CONSOLE.available()) {
        CONSOLE.println("restart to ntrip mode due to timeout connecting to wifi");
        settings.oneShotMode = 1;
        settingsSave();
        ESP.restart();
      }
      else{
         cliMode(CONSOLE);
      }
    }
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
  }
  digitalWrite(LED_PIN, LOW);

  CONSOLE.print("WiFi connected. IP address: ");
  CONSOLE.println(WiFi.localIP());


  size_t magicIndex = 0;

  //Clear any serial characters from the buffer
  while (CONSOLE.available())
    CONSOLE.read();


  // Main loop
  for (;;) {
    beginServer();

    int blen = CONSOLE.available();
    // Magic sequence check
    if (blen > 0) {
      int rlen = CONSOLE.readBytes(buf, min(blen, BT_BUF_SIZE));
      for (int i = 0; i < blen; ++i) {
        if (detectMagicChar(buf[i], MAGIC_SEQ, magicIndex)) {
          cliMode(CONSOLE);
          break;
        }
      }
    }

    delay(500);
  }
}

=== .\src\mode_ntrip.h ===
#pragma once

void runNtripServerMode();

=== .\src\settings.cpp ===
#include "settings.h"
#include <EEPROM.h>

Settings settings;

#define EEPROM_SIZE 512

void settingsDefault() {
  strcpy(settings.ssid, "your_wifi");
  strcpy(settings.wifiPassword, "your_password");
  strcpy(settings.casterHost, "ntrip.caster.tld");
  settings.casterPort = 2101;
  strcpy(settings.mountpoint, "MYMOUNT");
  strcpy(settings.ntripUser, "user");
  strcpy(settings.ntripPassword, "pass");
  settings.gnssBaud = 115200;
  settings.oneShotMode = 0;
}

void settingsLoad() {
  EEPROM.begin(EEPROM_SIZE);
  if (EEPROM.read(0) != 0xAB) {
    settingsDefault();
    settingsSave();
    return;
  }
  EEPROM.get(1, settings);
}

void settingsSave() {
  EEPROM.write(0, 0xAB);
  EEPROM.put(1, settings);
  EEPROM.commit();
}

=== .\src\settings.h ===
#pragma once
#include <Arduino.h>

struct Settings {
  char ssid[33];
  char wifiPassword[65];
  char casterHost[40];
  uint16_t casterPort;
  char mountpoint[40];
  char ntripUser[40];
  char ntripPassword[40];
  uint32_t gnssBaud;
  uint8_t oneShotMode; // 0=none/normal, 1=ntrip, 2=bt
};

extern Settings settings;

void settingsLoad();
void settingsSave();

